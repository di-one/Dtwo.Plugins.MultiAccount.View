@implements IDisposable;
@using MultiAccount;
@using API;

@if (AddedAccounts != null && AddedAccounts.Count > 0 && IsStarted == false)
{
	<DtwoStack Orientation=EStackOrientation.Vertical>
		<DtwoButton Variant="EVariant.Filled" OnClicked="(args) => OnClickStart()">Start</DtwoButton>
		<DtwoStack Orientation=EStackOrientation.Horizontal>
			<DtwoLabel Text="Auto Invite" Component="AutoInvite" />
			<DtwoSwitch Value=@InviteMembers Change=@((value) => InviteMembers = value) Name="AutoInvite" />
		</DtwoStack>
	</DtwoStack>
}

@if (MultiAccountManager.Options.Inputs.MultiClickKey.KeyId <= 0 || MultiAccountManager.Options.Inputs.NextKey.KeyId <= 0 || MultiAccountManager.Options.Inputs.PrevKey.KeyId <= 0)
{
    <DtwoAlert Style="EAlertStyle.Warning">
        <b>Pense à bien configurer tes touches dans les options !</b>
    </DtwoAlert>
}

@if (IsStarted)
{
	<DtwoButton Variant="EVariant.Filled" OnClicked="(args) => OnClickStop()">Stop</DtwoButton>
}

<DtwoGrid Gap="4" JustifyContent="EJustifyContent.Center">
    
		@if (IsStarted == false)
		{
			@foreach (var window in AvailableWindows)
			{
				 <DtwoGridItem>
					<AccountCard Controller="window" ShowRemove="false" ShowAdd="true" OnClickAdd="OnClickAdd"></AccountCard>
				</DtwoGridItem>
			}
		}
</DtwoGrid>

<DtwoGrid Spacing="4" Justify="Justify.Center">

		@for (int i = 0; i < AddedAccounts?.Count; i++)
		{
			MultiAccountController account = AddedAccounts.ElementAt(i).Value;
				@if (account != null && account.DofusWindow != null)
				{
				<DtwoGridItem>
						<AccountCard Controller="account.DofusWindow" ShowRemove="true" ShowAdd="false" OnClickAdd="OnClickAdd" OnClickRemove="OnClickRemove"></AccountCard>
				</DtwoGridItem>
				}
		}
</DtwoGrid> 

@code {
	private IReadOnlyDictionary<DofusWindow, MultiAccountController> AddedAccounts = MultiAccountManager.Accounts;
	private bool OptionsDialogOpenned = false;
	private bool IsStarted = MultiAccountManager.IsStarted;
	private bool InviteMembers;
	private List<DofusWindow> AvailableWindows = new List<DofusWindow>();

	private List<DofusWindow> GetAvailablWindows()
	{
		List<DofusWindow> ret = new List<DofusWindow>();

		for (int i = 0 ; i < DofusWindow.WindowsList.Count; i++)
		{
			var window = DofusWindow.WindowsList[i];
			if (window.Character == null)
			{
				continue;
			}

			if (AddedAccounts?.ContainsKey(window) == false)
			{
				ret.Add(window);
			}
		}

		return ret;
	}

	protected override void OnInitialized()
	{
		base.OnInitialized();

		AvailableWindows = GetAvailablWindows();

		DofusWindow.OndofusWindowSelected += OnWindowSelected;
		DofusWindow.OnDofusWindowStarted += OnDofusWindowAdded;
		DofusWindow.OnDofusWindowStoped += OnDofusWindowStoped;

		MultiAccountManager.OnStop += OnStop;
	}

	private void OnWindowSelected(DofusWindow window)
	{
		InvokeAsync(() => StateHasChanged());
	}

	private void OnClickStart()
	{
		MultiAccountManager.Start(InviteMembers);

		IsStarted = true;
		InvokeAsync(() => StateHasChanged());

		OpenFloatingWindow();
	}

	private void OnClickStop()
	{
		IsStarted = false;
		MultiAccountManager.Stop();

		//InvokeAsync(() => StateHasChanged()); // use event
	}


	private void OnClickAdd(DofusWindow dofusWindow)
	{
		MultiAccountManager.AddWindow(dofusWindow);
		AvailableWindows = GetAvailablWindows();
		InvokeAsync(() => StateHasChanged());
	}

	private void OnClickRemove(DofusWindow dofusWindow)
	{
		MultiAccountManager.RemoveWindow(dofusWindow);
		AvailableWindows = GetAvailablWindows();
		InvokeAsync(() => StateHasChanged());
	}

	private void OpenFloatingWindow()
	{
		MultiAccount_ViewPlugin_Manager.ShowFloatingWindow();
	}

	private void OpenDialog()
	{
		OptionsDialogOpenned = true;
	}

	private void OnExitOptions()
	{
		OptionsDialogOpenned = false;

		MultiAccount.MultiAccount_Plugin.Instance.LoadFile<MultiAccount.OptionsSettings>("options");
	}

	private void OnClickWp()
	{
		//MultiAccount.MultiAccountManager.MoveAllTo(DofusWindow.Selected);
	}

	private void OnStop()
	{
		AddedAccounts = MultiAccountManager.Accounts;
		AvailableWindows = GetAvailablWindows();

		InvokeAsync(() => StateHasChanged());
	}

	private void OnDofusWindowAdded(DofusWindow dofusWindow)
	{
		AddedAccounts = MultiAccountManager.Accounts;
		AvailableWindows = GetAvailablWindows();

		InvokeAsync(() => StateHasChanged());
	}

	private void OnDofusWindowStoped(DofusWindow dofusWindow)
	{
		AddedAccounts = MultiAccountManager.Accounts;
		AvailableWindows = GetAvailablWindows();

		InvokeAsync(() => StateHasChanged());
	}

	public void Dispose()
	{
		DofusWindow.OndofusWindowSelected -= OnWindowSelected;
		MultiAccountManager.OnStop -= OnStop;
	}
}
